<?php
// automatically generated by the FlatBuffers compiler, do not modify

declare(strict_types=1);

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatbufferBuilder;

class Attacker extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Attacker
     */
    public static function getRootAsAttacker(ByteBuffer $bb)
    {
        $obj = new Attacker();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function AttackerIdentifier()
    {
        return "MOVI";
    }

    public static function AttackerBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::AttackerIdentifier());
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Attacker
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return int
     */
    public function getSwordAttackDamage()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /**
     * @param FlatbufferBuilder $builder
     * @return void
     */
    public static function startAttacker(FlatbufferBuilder $builder)
    {
        $builder->StartObject(1);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @return Attacker
     */
    public static function createAttacker(FlatbufferBuilder $builder, $sword_attack_damage)
    {
        $builder->startObject(1);
        self::addSwordAttackDamage($builder, $sword_attack_damage);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addSwordAttackDamage(FlatbufferBuilder $builder, $swordAttackDamage)
    {
        $builder->addIntX(0, $swordAttackDamage, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @return int table offset
     */
    public static function endAttacker(FlatbufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
