<?php
// automatically generated by the FlatBuffers compiler, do not modify

declare(strict_types=1);

namespace MyGame\Example;

use \Google\FlatBuffers\Constants;
use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatbufferBuilder;

class TestSimpleTableWithEnum extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return TestSimpleTableWithEnum
     */
    public static function getRootAsTestSimpleTableWithEnum(ByteBuffer $bb): TestSimpleTableWithEnum
    {
        $obj = new TestSimpleTableWithEnum();
        return $obj->init($bb->followUOffset($bb->getPosition()), $bb);
    }

    public static function TestSimpleTableWithEnumIdentifier(): string
    {
        return "MONS";
    }

    public static function TestSimpleTableWithEnumBufferHasIdentifier(ByteBuffer $buf): bool
    {
        return self::__has_identifier($buf, self::TestSimpleTableWithEnumIdentifier());
    }

    public static function TestSimpleTableWithEnumExtension(): string
    {
        return "mon";
    }

    /**
     * @param NPosT $_i offset
     * @param ByteBuffer $_bb
     * @return TestSimpleTableWithEnum
     **/
    public function init(int $_i, ByteBuffer $_bb): TestSimpleTableWithEnum
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return ByteT
     */
    public function getColor(): int
    {
        $o = $this->__offset(4);
        return $o !== 0 ? $this->bb->getByte(Constants::asNPos($o + $this->bb_pos)) : \MyGame\Example\Color::Green;
    }

    /**
     * @param FlatbufferBuilder $builder
     */
    public static function startTestSimpleTableWithEnum(FlatbufferBuilder $builder): void
    {
        $builder->StartObject(1);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param ByteT $color
     * @return WPosT
     */
    public static function createTestSimpleTableWithEnum(FlatbufferBuilder $builder, int $color): int
    {
        $builder->startObject(1);
        self::addColor($builder, $color);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param ByteT $color
     */
    public static function addColor(FlatbufferBuilder $builder, int $color): void
    {
        $builder->addByteX(0, $color, 2);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @return WPosT table offset
     */
    public static function endTestSimpleTableWithEnum(FlatbufferBuilder $builder): int
    {
        $o = $builder->endObject();
        return $o;
    }
}
