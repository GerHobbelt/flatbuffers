<?php
// automatically generated by the FlatBuffers compiler, do not modify

declare(strict_types=1);

namespace MyGame\Example;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatbufferBuilder;

class Stat extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Stat
     */
    public static function getRootAsStat(ByteBuffer $bb)
    {
        $obj = new Stat();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    public static function StatIdentifier()
    {
        return "MONS";
    }

    public static function StatBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::StatIdentifier());
    }

    public static function StatExtension()
    {
        return "mon";
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Stat
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return long
     */
    public function getVal()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getLong($o + $this->bb_pos) : 0;
    }

    /**
     * @return ushort
     */
    public function getCount()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getUshort($o + $this->bb_pos) : 0;
    }

    /**
     * @param FlatbufferBuilder $builder
     * @return void
     */
    public static function startStat(FlatbufferBuilder $builder)
    {
        $builder->StartObject(3);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @return Stat
     */
    public static function createStat(FlatbufferBuilder $builder, $id, $val, $count)
    {
        $builder->startObject(3);
        self::addId($builder, $id);
        self::addVal($builder, $val);
        self::addCount($builder, $count);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addId(FlatbufferBuilder $builder, $id)
    {
        $builder->addOffsetX(0, $id, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param long
     * @return void
     */
    public static function addVal(FlatbufferBuilder $builder, $val)
    {
        $builder->addLongX(1, $val, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param ushort
     * @return void
     */
    public static function addCount(FlatbufferBuilder $builder, $count)
    {
        $builder->addUshortX(2, $count, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @return int table offset
     */
    public static function endStat(FlatbufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
