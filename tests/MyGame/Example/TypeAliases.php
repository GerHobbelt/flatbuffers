<?php
// automatically generated by the FlatBuffers compiler, do not modify

declare(strict_types=1);

namespace MyGame\Example;

use \Google\FlatBuffers\Constants;
use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatbufferBuilder;

class TypeAliases extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return TypeAliases
     */
    public static function getRootAsTypeAliases(ByteBuffer $bb): TypeAliases
    {
        $obj = new TypeAliases();
        return $obj->init($bb->followUOffset($bb->getPosition()), $bb);
    }

    public static function TypeAliasesIdentifier()
    {
        return "MONS";
    }

    public static function TypeAliasesBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::TypeAliasesIdentifier());
    }

    public static function TypeAliasesExtension()
    {
        return "mon";
    }

    /**
     * @param NPosT $_i offset
     * @param ByteBuffer $_bb
     * @return TypeAliases
     **/
    public function init(int $_i, ByteBuffer $_bb): TypeAliases
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return SbyteT
     */
    public function getI8()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getSbyte(Constants::asNPos($o + $this->bb_pos)) : 0;
    }

    /**
     * @return ByteT
     */
    public function getU8()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getByte(Constants::asNPos($o + $this->bb_pos)) : 0;
    }

    /**
     * @return ShortT
     */
    public function getI16()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getShort(Constants::asNPos($o + $this->bb_pos)) : 0;
    }

    /**
     * @return UshortT
     */
    public function getU16()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getUshort(Constants::asNPos($o + $this->bb_pos)) : 0;
    }

    /**
     * @return IntT
     */
    public function getI32()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getInt(Constants::asNPos($o + $this->bb_pos)) : 0;
    }

    /**
     * @return UintT
     */
    public function getU32()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getUint(Constants::asNPos($o + $this->bb_pos)) : 0;
    }

    /**
     * @return LongT
     */
    public function getI64()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getLong(Constants::asNPos($o + $this->bb_pos)) : 0;
    }

    /**
     * @return UlongT
     */
    public function getU64()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getUlong(Constants::asNPos($o + $this->bb_pos)) : 0;
    }

    /**
     * @return FloatT
     */
    public function getF32()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getFloat(Constants::asNPos($o + $this->bb_pos)) : 0.0;
    }

    /**
     * @return DoubleT
     */
    public function getF64()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getDouble(Constants::asNPos($o + $this->bb_pos)) : 0.0;
    }

    /**
     * @param UOffsetT $j offset
     * @return SbyteT
     */
    public function getV8(int $j)
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getSbyte(Constants::asNPos($this->__vector($o) + $j * 1)) : 0;
    }

    /**
     * @return UOffsetT
     */
    public function getV8Length(): int
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param UOffsetT $j offset
     * @return DoubleT
     */
    public function getVf64(int $j)
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getDouble(Constants::asNPos($this->__vector($o) + $j * 8)) : 0;
    }

    /**
     * @return UOffsetT
     */
    public function getVf64Length(): int
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatbufferBuilder $builder
     * @return void
     */
    public static function startTypeAliases(FlatbufferBuilder $builder)
    {
        $builder->StartObject(12);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param NPosT $i8
     * @param NPosT $u8
     * @param NPosT $i16
     * @param NPosT $u16
     * @param NPosT $i32
     * @param NPosT $u32
     * @param NPosT $i64
     * @param NPosT $u64
     * @param NPosT $f32
     * @param NPosT $f64
     * @param NPosT $v8
     * @param NPosT $vf64
     * @return WPosT
     */
    public static function createTypeAliases(FlatbufferBuilder $builder, int $i8, int $u8, int $i16, int $u16, int $i32, int $u32, int $i64, int $u64, int $f32, int $f64, int $v8, int $vf64)
    {
        $builder->startObject(12);
        self::addI8($builder, $i8);
        self::addU8($builder, $u8);
        self::addI16($builder, $i16);
        self::addU16($builder, $u16);
        self::addI32($builder, $i32);
        self::addU32($builder, $u32);
        self::addI64($builder, $i64);
        self::addU64($builder, $u64);
        self::addF32($builder, $f32);
        self::addF64($builder, $f64);
        self::addV8($builder, $v8);
        self::addVf64($builder, $vf64);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $i8
     * @return void
     */
    public static function addI8(FlatbufferBuilder $builder, mixed $i8)
    {
        $builder->addSbyteX(0, $i8, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $u8
     * @return void
     */
    public static function addU8(FlatbufferBuilder $builder, mixed $u8)
    {
        $builder->addByteX(1, $u8, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $i16
     * @return void
     */
    public static function addI16(FlatbufferBuilder $builder, mixed $i16)
    {
        $builder->addShortX(2, $i16, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $u16
     * @return void
     */
    public static function addU16(FlatbufferBuilder $builder, mixed $u16)
    {
        $builder->addUshortX(3, $u16, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $i32
     * @return void
     */
    public static function addI32(FlatbufferBuilder $builder, mixed $i32)
    {
        $builder->addIntX(4, $i32, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $u32
     * @return void
     */
    public static function addU32(FlatbufferBuilder $builder, mixed $u32)
    {
        $builder->addUintX(5, $u32, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $i64
     * @return void
     */
    public static function addI64(FlatbufferBuilder $builder, mixed $i64)
    {
        $builder->addLongX(6, $i64, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $u64
     * @return void
     */
    public static function addU64(FlatbufferBuilder $builder, mixed $u64)
    {
        $builder->addUlongX(7, $u64, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $f32
     * @return void
     */
    public static function addF32(FlatbufferBuilder $builder, mixed $f32)
    {
        $builder->addFloatX(8, $f32, 0.0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $f64
     * @return void
     */
    public static function addF64(FlatbufferBuilder $builder, mixed $f64)
    {
        $builder->addDoubleX(9, $f64, 0.0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $v8
     * @return void
     */
    public static function addV8(FlatbufferBuilder $builder, mixed $v8)
    {
        $builder->addOffsetX(10, $v8, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param list<SbyteT> $data offset array
     * @return WPosT vector offset
     */
    public static function createV8Vector(FlatbufferBuilder $builder, array $data)
    {
        $builder->startVector(1, Constants::asUOffset(count($data)), 1);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putSbyte($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UOffsetT $numElems
     * @return void
     */
    public static function startV8Vector(FlatbufferBuilder $builder, $numElems)
    {
        $builder->startVector(1, $numElems, 1);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $vf64
     * @return void
     */
    public static function addVf64(FlatbufferBuilder $builder, mixed $vf64)
    {
        $builder->addOffsetX(11, $vf64, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param list<DoubleT> $data offset array
     * @return WPosT vector offset
     */
    public static function createVf64Vector(FlatbufferBuilder $builder, array $data)
    {
        $builder->startVector(8, Constants::asUOffset(count($data)), 8);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putDouble($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UOffsetT $numElems
     * @return void
     */
    public static function startVf64Vector(FlatbufferBuilder $builder, $numElems)
    {
        $builder->startVector(8, $numElems, 8);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @return WPosT table offset
     */
    public static function endTypeAliases(FlatbufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
